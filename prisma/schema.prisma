generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  name         String
  lastName     String
  professionId String?
  profession   Profession? @relation(fields: [professionId], references: [id])
  description  String?
  phone        String
  email        String      @unique
  address      String
  province     String?
  photo        String?     @db.Text
  verifiedId   String?
  verified     Verified?   @relation(fields: [verifiedId], references: [id])
  agencyId     String?
  agency       Agency?     @relation(fields: [agencyId], references: [id])
  password     String
  createdAt    DateTime    @default(now())

  messageThreads MessageThread[]
  estates        RealEstate[]    @relation("UserEstates")
  favorites      RealEstate[]    @relation("UserFavorites")
}

model Profession {
  id      String          @id @default(uuid())
  title   String
  key     String          @unique
  users   User[]
  workers ServiceWorker[]
}

model Verified {
  id    String  @id @default(uuid())
  value Boolean
  title String
  users User[]
}

model Agency {
  id      String @id @default(uuid())
  name    String
  type    String
  address String
  phone   String
  email   String
  website String
  users   User[]
}

model Service {
  id      String  @unique
  title   String
  checked Boolean
}

model ServiceWorker {
  id           String     @id @default(uuid())
  name         String
  profession   Profession @relation(fields: [professionId], references: [id])
  professionId String
  description  String?
  phone        String
  email        String     @unique
  address      String
  photo        String
  createdAt    DateTime   @default(now())
}

model MessageThread {
  id         String         @id @default(uuid())
  status     MessageStatus
  isArchived Boolean        @default(false)
  email      String
  replies    MessageReply[] @relation("ThreadReplies")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model MessageReply {
  id             String        @id @default(uuid())
  message        String
  timestamp      DateTime      @default(now())
  threadId       String
  thread         MessageThread @relation("ThreadReplies", fields: [threadId], references: [id], onDelete: Cascade)
  senderName     String
  senderLastName String
  senderEmail    String
}

model RealEstate {
  id              Int                @id @default(autoincrement())
  images          RealEstateImages[]
  label           String             @db.Text
  isTop           Boolean            @default(false)
  isFavorite      Boolean            @default(false)
  isSelectedOnMap Boolean            @default(false)
  status          EstateStatus       @default(moderation)
  typeKey         String
  typeValue       String
  country         String?
  state           String?

  addressLocation String
  addressLat      Float
  addressLng      Float

  rooms          Int
  bathroomsTotal Int?
  bathroomsDesc  String? @db.Text

  operationKey   String
  operationValue String

  livingAreaM2 String
  landAreaM2   String?

  price          String
  parkPlacePrice String?
  views          Int     @default(0)

  yearBuilt         Int
  floors            String?
  garage            String?
  heating           String?
  commissionFree    String?
  balcony           String?
  terrace           String?
  garden            String?
  energyCertificate String?
  HBW               String?
  HBWEnergyClass    String?
  fGEE              String?
  fGEEEnergyClass   String?
  cellar            Boolean @default(false)

  netOperationCosts           String?
  brokerCommissions           String?
  brokerCommissionsPercentage String?
  propertyDescriptions        String? @db.Text
  locationDescriptions        String? @db.Text

  additionalFeatures String? @db.Text
  kitchen            String?
  loungeArea         String?
  furnished          String?
  availability       String?
  additionalInfo     String?

  ownerId String
  owner   User   @relation("UserEstates", fields: [ownerId], references: [id])

  favoredBy User[] @relation("UserFavorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  street                 String?
  number                 String?
  visibleDetailedAddress Boolean @default(false)
  rentFormation          String?

  premises     RealEstatePremises[]
  equipments   RealEstateEquipments[]
  fees         RealEstateFees[]
  monthlyCosts RealEstateMonthlyCosts[]
}

model RealEstatePremises {
  id    String @id @default(uuid())
  key   String
  label String @db.Text
  name  String @db.Text
  value String @db.Text

  realEstateId Int
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
}

model RealEstateEquipments {
  id    String  @id @default(uuid())
  key   String
  label String  @db.Text
  value Boolean

  realEstateId Int
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
}

model RealEstateFees {
  id           String @id @default(uuid())
  title        String
  key          String
  value        String
  descriptions String

  realEstateId Int
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
}

model RealEstateMonthlyCosts {
  id           String @id @default(uuid())
  title        String
  key          String
  cost         String
  descriptions String

  realEstateId Int
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
}

model RealEstateImages {
  id       String     @id @default(uuid())
  url      String?    @db.Text
  estateId Int
  estate   RealEstate @relation(fields: [estateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

enum MessageStatus {
  new
  read
}

enum EstateStatus {
  active
  inactive
  moderation
  rejected
}
