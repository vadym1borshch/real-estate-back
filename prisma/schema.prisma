generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  lastName       String
  professionId   String?
  description    String?
  phone          String
  email          String          @unique
  address        String
  province       String?
  photo          String?         @db.Text
  verifiedId     String?
  agencyId       String?
  password       String
  createdAt      DateTime        @default(now())
  messageThreads MessageThread[]
  estates        RealEstate[]    @relation("UserEstates")
  agency         Agency?         @relation(fields: [agencyId], references: [id])
  profession     Profession?     @relation(fields: [professionId], references: [id])
  verified       Verified?       @relation(fields: [verifiedId], references: [id])
  favorites      RealEstate[]    @relation("UserFavorites")

  @@index([agencyId], map: "User_agencyId_fkey")
  @@index([professionId], map: "User_professionId_fkey")
  @@index([verifiedId], map: "User_verifiedId_fkey")
}

model Profession {
  id      String          @id @default(uuid())
  title   String
  key     String          @unique
  workers ServiceWorker[]
  users   User[]
}

model Verified {
  id    String  @id @default(uuid())
  value Boolean
  title String
  users User[]
}

model Agency {
  id      String @id @default(uuid())
  name    String
  type    String
  address String
  phone   String
  email   String
  website String
  users   User[]
}

model Service {
  id      String  @unique
  title   String
  checked Boolean
}

model ServiceWorker {
  id           String     @id @default(uuid())
  name         String
  professionId String
  description  String?
  phone        String
  email        String     @unique
  address      String
  photo        String
  createdAt    DateTime   @default(now())
  profession   Profession @relation(fields: [professionId], references: [id])

  @@index([professionId], map: "ServiceWorker_professionId_fkey")
}

model MessageThread {
  id         String         @id @default(uuid())
  status     MessageStatus
  isArchived Boolean        @default(false)
  email      String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String
  replies    MessageReply[] @relation("ThreadReplies")
  user       User           @relation(fields: [userId], references: [id])

  @@index([userId], map: "MessageThread_userId_fkey")
}

model MessageReply {
  id             String        @id @default(uuid())
  message        String
  timestamp      DateTime      @default(now())
  threadId       String
  senderName     String
  senderLastName String
  senderEmail    String
  thread         MessageThread @relation("ThreadReplies", fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId], map: "MessageReply_threadId_fkey")
}

model RealEstate {
  id                          Int                      @id @default(autoincrement())
  label                       String                   @db.Text
  isTop                       Boolean                  @default(false)
  typeKey                     String
  typeValue                   String
  addressLocation             String
  addressLat                  Float
  addressLng                  Float
  rooms                       Int
  bathroomsTotal              Int?
  bathroomsDesc               String?                  @db.Text
  operationKey                String
  operationValue              String
  livingAreaM2                Int
  landAreaM2                  Int?
  price                       String
  views                       Int                      @default(0)
  yearBuilt                   Int
  floors                      String?
  garage                      String?
  heating                     String?
  commissionFree              String?
  additionalFeatures          String?                  @db.Text
  kitchen                     String?
  loungeArea                  String?
  furnished                   String?
  availability                String?
  additionalInfo              String?
  ownerId                     String
  createdAt                   DateTime                 @default(now())
  updatedAt                   DateTime                 @updatedAt
  number                      String?
  rentFormation               String?
  street                      String?
  visibleDetailedAddress      Boolean                  @default(false)
  status                      EstateStatus             @default(moderation)
  country                     String?
  state                       String?
  HBW                         String?
  HBWEnergyClass              String?
  balcony                     String?
  brokerCommissions           String?
  brokerCommissionsPercentage String?
  cellar                      Boolean                  @default(false)
  energyCertificate           String?
  fGEE                        String?
  fGEEEnergyClass             String?
  isFavorite                  Boolean                  @default(false)
  isSelectedOnMap             Boolean                  @default(false)
  locationDescriptions        String?                  @db.Text
  netOperationCosts           String?
  parkPlacePrice              String?
  propertyDescriptions        String?                  @db.Text
  terrace                     String?
  owner                       User                     @relation("UserEstates", fields: [ownerId], references: [id])
  equipments                  RealEstateEquipments[]
  fees                        RealEstateFees[]
  images                      RealEstateImages[]
  monthlyCosts                RealEstateMonthlyCosts[]
  premises                    RealEstatePremises[]
  favoredBy                   User[]                   @relation("UserFavorites")

  @@index([ownerId], map: "RealEstate_ownerId_fkey")
}

model RealEstatePremises {
  id           String     @id @default(uuid())
  value        String     @db.Text
  realEstateId Int
  key          String
  label        String     @db.Text
  name         String     @db.Text
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])

  @@index([realEstateId], map: "RealEstatePremises_realEstateId_fkey")
}

model RealEstateEquipments {
  id           String     @id @default(uuid())
  realEstateId Int
  key          String
  label        String     @db.Text
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])

  @@index([realEstateId], map: "RealEstateEquipments_realEstateId_fkey")
}

model RealEstateFees {
  id           String     @id @default(uuid())
  title        String
  descriptions String
  realEstateId Int
  key          String
  value        String
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])

  @@index([realEstateId], map: "RealEstateFees_realEstateId_fkey")
}

model RealEstateMonthlyCosts {
  id           String     @id @default(uuid())
  title        String
  descriptions String
  realEstateId Int
  cost         String
  key          String
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])

  @@index([realEstateId], map: "RealEstateMonthlyCosts_realEstateId_fkey")
}

model RealEstateImages {
  id        String     @id @default(uuid())
  url       String?    @db.Text
  estateId  Int
  createdAt DateTime   @default(now())
  estate    RealEstate @relation(fields: [estateId], references: [id], onDelete: Cascade)

  @@index([estateId], map: "RealEstateImages_estateId_fkey")
}

model Equipment {
  id            String   @id @default(uuid())
  label         String
  key           String
  category      String
  categoryTitle String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("equipments")
}

model FeesField {
  id           String   @id @default(uuid())
  title        String   @db.Text
  key          String
  value        String
  descriptions String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("fees_fields")
}

model PremisesField {
  id        String   @id @default(uuid())
  value     String   @db.Text
  key       String
  label     String   @db.Text
  name      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("premises_fields")
}

enum MessageStatus {
  new
  read
}

enum EstateStatus {
  active
  inactive
  moderation
  rejected
}
